name: Scrape and Update THE CITY Links

on:
  schedule:
    - cron: "0 11 * * *" # 7am NYC
    - cron: "0 17 * * *" # 1pm NYC
    - cron: "0 23 * * *" # 7pm NYC
  workflow_dispatch:

jobs:
  scrape-content:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install required packages
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      - name: Scrape and validate content
        run: |
          import requests
          from bs4 import BeautifulSoup
          import json
          import os

          # Scrape the webpage
          url = "https://www.thecity.nyc/category/campaign-2025/"
          response = requests.get(url)
          soup = BeautifulSoup(response.text, 'html.parser')

          # Find the first three ".entry-title" classes with child <a> tags
          links = []
          for entry in soup.find_all(class_="entry-title", limit=3):
              a_tag = entry.find('a')
              if a_tag:
                  text = a_tag.get_text(strip=True)
                  href = a_tag.get('href', '').strip()
                  if len(text) >= 5 and len(href) >= 5:
                      links.append({'text': text, 'href': href})

          # Check that we have exactly three valid entries
          if len(links) == 3:
              # Save as a JSON file
              file_path = 'the-city-links.json'
              with open(file_path, 'w') as f:
                  json.dump(links, f, indent=4)

              # Check if the file was modified and commit changes
              if os.path.exists(file_path):
                  # Check if file content changed (by comparing current file vs saved version in the repo)
                  with open(file_path, 'r') as f:
                      content = f.read().strip()

                  # Compare with previous commit content
                  if content != json.dumps(links, indent=4).strip():
                      os.system(f'git add {file_path}')
                      os.system(f'git commit -m "Update the-city-links.json"')
                      os.system('git push')
          else:
              print("Error: There are not exactly 3 valid links with a minimum length of 5 characters.")
              exit(1) # Exit with an error if the condition is not met

      - name: Commit and push if there are changes
        uses: EndBug/add-and-commit@v7
        with:
          author_name: "github-actions"
          author_email: "github-actions@github.com"
          message: "Update the-city-links.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
